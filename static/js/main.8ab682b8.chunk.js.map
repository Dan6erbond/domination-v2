{"version":3,"sources":["Domination.js","serviceWorker.js","index.js"],"names":["XMLParser","require","Country","props","state","red","id","className","this","class","d","path","onMouseEnter","mouseEnter","onMouseLeave","mouseLeave","name","setState","React","Component","Domination","countries","fetch","then","r","text","objects","parseFromString","getElementsByTagName","i","country","attributes","includes","push","xmlns","version","viewBox","width","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAIIA,G,YAAYC,EAAQ,KAElBC,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,KAAK,GAHS,E,sEAOR,IAAD,OACP,OACE,0BAAMC,GAAG,KAAKC,UAAWC,KAAKJ,MAAMC,IAAMG,KAAKL,MAAMM,MAAQ,OAASD,KAAKL,MAAMM,MAAOC,EAAGF,KAAKL,MAAMQ,KAChGC,aAAc,kBAAM,EAAKC,cACzBC,aAAc,kBAAM,EAAKC,eAC/B,+BAAQP,KAAKJ,MAAMY,S,mCAMrBR,KAAKS,SAAS,CACZZ,KAAK,M,mCAKPG,KAAKS,SAAS,CACZZ,KAAK,Q,GA1BWa,IAAMC,WA+BPC,E,YACnB,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACiB,UAAW,IAFT,E,iFAKE,IAAD,OACjBC,MAAM,wBACLC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAAAE,GACJ,IAEIC,GAFS,IAAI1B,GACA2B,gBAAgBF,GACfG,qBAAqB,QAEnCP,EAAY,GAChB,IAAK,IAAIQ,KAAKH,EAAQ,CACpB,IAAII,EAAUJ,EAAQG,GAClB,UAAWC,EAAQC,YAAcD,EAAQC,WAAWtB,MAAMuB,SAAS,WACrEX,EAAUY,KAAKH,GAGnB,EAAKb,SAAS,CAACI,UAAWA,S,+BAO5B,OACE,yCAEE,yBAAKa,MAAM,6BAA6BC,QAAQ,MAAMC,QAAQ,mBAAmBC,MAAM,QACpF7B,KAAKJ,MAAMiB,UAAUiB,KAAI,SAACR,GAAD,OAAa,kBAAC,EAAD,CAASd,KAAK,cAAcuB,IAAKT,EAAQC,WAAWzB,GAAIG,MAAM,YAAYE,KAAMmB,EAAQC,WAAWrB,a,GAhC5GQ,IAAMC,WCzB1BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.8ab682b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Domination.css';\r\nimport './BlankMap-World.css';\r\n\r\nvar XMLParser = require('react-xml-parser');\r\n\r\nclass Country extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      red: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <path id=\"ss\" className={this.state.red ? this.props.class + \" red\" : this.props.class} d={this.props.path}\r\n            onMouseEnter={() => this.mouseEnter()}\r\n            onMouseLeave={() => this.mouseLeave()}>\r\n    \t\t<title>{this.state.name}</title>\r\n    \t</path>\r\n    );\r\n  }\r\n\r\n  mouseEnter(){\r\n    this.setState({\r\n      red: true\r\n    });\r\n  }\r\n\r\n  mouseLeave(){\r\n    this.setState({\r\n      red: false\r\n    });\r\n  }\r\n}\r\n\r\nexport default class Domination extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {countries: []}\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('./BlankMap-World.svg')\r\n    .then((r) => r.text())\r\n    .then(text  => {\r\n      var parser = new XMLParser();\r\n      var xml = parser.parseFromString(text);\r\n      var objects = xml.getElementsByTagName('path');\r\n      // objects.push(...xml.getElementsByTagName('g'));\r\n      var countries = [];\r\n      for (var i in objects){\r\n        var country = objects[i];\r\n        if (\"class\" in country.attributes && country.attributes.class.includes(\"landxx\")) {\r\n          countries.push(country);\r\n        }\r\n      }\r\n      this.setState({countries: countries});\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div>\r\n        The game.\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"-30 61 2754 1398\" width=\"100%\">\r\n          {this.state.countries.map((country) => <Country name=\"South Sudan\" key={country.attributes.id} class=\"landxx ss\" path={country.attributes.d} />)}\r\n\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Domination from './Domination.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Domination />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}