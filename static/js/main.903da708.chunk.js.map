{"version":3,"sources":["Domination.js","serviceWorker.js","index.js"],"names":["XMLParser","require","Country","id","className","this","props","red","class","d","path","onMouseEnter","onMouseLeave","name","React","Component","Domination","state","countries","currentCountry","fetch","then","r","text","objects","parseFromString","getElementsByTagName","cs","i","country","attributes","includes","children","length","value","push","setState","xmlns","version","viewBox","width","map","index","key","hoverFun","hoverCountry","mouseEnter","mouseLeave","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAIIA,G,YAAYC,EAAQ,KAElBC,E,iLAMF,OACI,0BAAMC,GAAG,KAAKC,UAAWC,KAAKC,MAAMC,IAAMF,KAAKC,MAAME,MAAQ,OAASH,KAAKC,MAAME,MAAOC,EAAGJ,KAAKC,MAAMI,KAChGC,aAAcN,KAAKC,MAAMK,aAAcC,aAAcP,KAAKC,MAAMM,cACpE,+BAAQP,KAAKC,MAAMO,W,GATPC,IAAMC,WAePC,E,YACnB,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KACDW,MAAQ,CAACC,UAAW,GAAIC,eAAgB,GAF7B,E,iFAKE,IAAD,OACjBC,MAAM,wBACLC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAAAE,GACJ,IAEIC,GAFS,IAAIxB,GACAyB,gBAAgBF,GACfG,qBAAqB,QAEnCC,EAAK,GACT,IAAK,IAAIC,KAAKJ,EAAQ,CACpB,IAAIK,EAAUL,EAAQI,GAClB,UAAWC,EAAQC,YAAcD,EAAQC,WAAWtB,MAAMuB,SAAS,WAAaF,EAAQG,SAASC,QAAU,IAC7GJ,EAAQhB,KAAOgB,EAAQH,qBAAqB,SAAS,GAAGQ,MACxDP,EAAGQ,KAAKN,IAGZ,EAAKO,SAAS,CAAClB,UAAWS,S,+BAIpB,IAAD,OAQP,OACE,6BACE,yBAAKU,MAAM,6BAA6BC,QAAQ,MAAMC,QAAQ,mBAAmBC,MAAM,QACpFnC,KAAKY,MAAMC,UAAUuB,KAAI,SAACZ,EAASa,GAAV,OACxB,kBAAC,EAAD,CAAS7B,KAAMgB,EAAQhB,KAAM8B,IAAKd,EAAQC,WAAW3B,GAAIK,MAAM,YAAYE,KAAMmB,EAAQC,WAAWrB,EAC5FmC,SAAU,EAAKC,aAActC,IAAKmC,IAAU,EAAKzB,MAAME,eACvDR,aAAc,kBAAM,EAAKmC,WAAWJ,IAAQ9B,aAAc,kBAAM,EAAKmC,oBAIjF,yBAAK3C,UAAU,aACb,6BAAMC,KAAKY,MAAMC,UAAUe,OAAS,GAAkC,MAA7B5B,KAAKY,MAAME,eAAyBd,KAAKY,MAAMC,UAAUb,KAAKY,MAAME,gBAAgBN,KAAO,Q,iCAMhI6B,GACVrC,KAAK+B,SAAS,CAACjB,eAAgBuB,M,mCAI/BrC,KAAK+B,SAAS,CAACjB,eAAgB,W,GAxDKL,IAAMC,WCT1BiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.903da708.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Domination.css';\r\nimport './BlankMap-World.css';\r\n\r\nvar XMLParser = require('react-xml-parser');\r\n\r\nclass Country extends React.Component {\r\n  /* constructor(props){\r\n    super(props);\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n        <path id=\"ss\" className={this.props.red ? this.props.class + \" red\" : this.props.class} d={this.props.path}\r\n              onMouseEnter={this.props.onMouseEnter} onMouseLeave={this.props.onMouseLeave} >\r\n          <title>{this.props.name}</title>\r\n        </path>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Domination extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {countries: [], currentCountry: 1}\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('./BlankMap-World.svg')\r\n    .then((r) => r.text())\r\n    .then(text  => {\r\n      var parser = new XMLParser();\r\n      var xml = parser.parseFromString(text);\r\n      var objects = xml.getElementsByTagName('path');\r\n      // objects.push(...xml.getElementsByTagName('g'));\r\n      var cs = [];\r\n      for (var i in objects){\r\n        var country = objects[i];\r\n        if (\"class\" in country.attributes && country.attributes.class.includes(\"landxx\") && country.children.length >= 1) {\r\n          country.name = country.getElementsByTagName(\"title\")[0].value;\r\n          cs.push(country);\r\n        }\r\n      }\r\n      this.setState({countries: cs});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    /* var countries = [];\r\n    for (var i in this.state.countries) {\r\n      var country = this.state.countries[i];\r\n      countries.push(<Country name={country.name} key={country.attributes.id} class=\"landxx ss\" path={country.attributes.d}\r\n              hoverFun={this.hoverCountry} red={i === this.state.currentCountry}\r\n              onMouseEnter={(i) => this.mouseEnter(i)} onMouseLeave={() => this.mouseLeave()} />);\r\n    } */\r\n    return (\r\n      <div>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"-30 61 2754 1398\" width=\"100%\">\r\n          {this.state.countries.map((country, index) =>\r\n            <Country name={country.name} key={country.attributes.id} class=\"landxx ss\" path={country.attributes.d}\r\n                    hoverFun={this.hoverCountry} red={index === this.state.currentCountry}\r\n                    onMouseEnter={() => this.mouseEnter(index)} onMouseLeave={() => this.mouseLeave()} />\r\n          )}\r\n        </svg>\r\n\r\n        <div className=\"bottomBar\">\r\n          <div>{this.state.countries.length > 0 && this.state.currentCountry != null ? this.state.countries[this.state.currentCountry].name : \"\"}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  mouseEnter (index) {\r\n    this.setState({currentCountry: index});\r\n  }\r\n\r\n  mouseLeave () {\r\n    this.setState({currentCountry: null});\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Domination from './Domination.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Domination />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}