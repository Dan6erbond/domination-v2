{"version":3,"sources":["Domination.js","serviceWorker.js","index.js"],"names":["parser","require","Country","id","this","props","className","onMouseEnter","onMouseLeave","name","paths","map","path","d","React","Component","Domination","state","countries","currentCountry","fetch","then","r","text","ocean","xml","parseFromString","getElementsByTagName","gs","ids","i","attributes","class","includes","children","length","value","push","g","j","console","log","setState","xmlns","version","viewBox","country","index","key","mouseEnter","mouseLeave","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5a169d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Domination.css';\r\nimport './BlankMap-World.css';\r\n\r\nvar XMLParser = require('react-xml-parser');\r\nvar parser = new XMLParser();\r\n\r\nclass Country extends React.Component {\r\n  /* constructor(props){\r\n    super(props);\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n        <g id={this.props.id} className=\"landxx\" onMouseEnter={this.props.onMouseEnter} onMouseLeave={this.props.onMouseLeave} >\r\n          <title>{this.props.name}</title>\r\n          {this.props.paths.map((path) =>\r\n            <path d={path} />\r\n          )}\r\n        </g>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Domination extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {countries: [], currentCountry: null}\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('./BlankMap-World.svg')\r\n    .then((r) => r.text()).then(text  => {\r\n      var xml = parser.parseFromString(text);\r\n\r\n      var paths = xml.getElementsByTagName('path');\r\n      var gs = xml.getElementsByTagName('g');\r\n\r\n      var ids = [];\r\n      var countries = [];\r\n      var ocean;\r\n      for (let i in paths){\r\n        let path = paths[i];\r\n        if (!(\"class\" in path.attributes)) {\r\n          continue;\r\n        } else if (path.attributes.class.includes(\"landxx\") && path.children.length >= 1) {\r\n          path.name = path.getElementsByTagName(\"title\")[0].value;\r\n          path.id = path.attributes.id;\r\n          path.paths = [path.attributes.d];\r\n          if (!ids.includes(path.id)) {\r\n            countries.push(path);\r\n            ids.push(path.id);\r\n          }\r\n        } else if (path.attributes.class.includes(\"oceanxx\")) {\r\n          ocean = <path id=\"ocean\" className=\"oceanxx\" d={path.attributes.d} />;\r\n        }\r\n      }\r\n      for (let i in gs) {\r\n        var g = gs[i];\r\n        if (!(\"class\" in g.attributes)) {\r\n          continue;\r\n        } else if (g.attributes.class.includes(\"landxx\") && g.children.length >= 1 && g.getElementsByTagName(\"title\").length >= 1) {\r\n          g.name = g.getElementsByTagName(\"title\")[0].value;\r\n          g.id = g.attributes.id;\r\n          g.paths = [];\r\n          let paths = g.getElementsByTagName(\"path\");\r\n          for (let j in paths) {\r\n            let path = paths[j];\r\n            g.paths.push(path.attributes.d);\r\n          }\r\n          if (!ids.includes(g.id)) {\r\n            console.log(g)\r\n            countries.push(g);\r\n            ids.push(g.id);\r\n          }\r\n        }\r\n      }\r\n      this.setState({countries: countries, ocean: ocean});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"-30 61 2754 1398\" className=\"map\">\r\n          {\"ocean\" in this.state ? this.state.ocean : null}\r\n          {this.state.countries.map((country, index) =>\r\n            <Country name={country.name} key={country.id} id={country.id} paths={country.paths}\r\n                    onMouseEnter={() => this.mouseEnter(index)} onMouseLeave={() => this.mouseLeave()} />\r\n          )}\r\n        </svg>\r\n\r\n        <div className=\"bottomBar\">\r\n          <div>\r\n            {this.state.countries.length > 0 && this.state.currentCountry != null ? this.state.countries[this.state.currentCountry].name : \"\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  mouseEnter (index) {\r\n    this.setState({currentCountry: index});\r\n  }\r\n\r\n  mouseLeave () {\r\n    this.setState({currentCountry: null});\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Domination from './Domination.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Domination />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}